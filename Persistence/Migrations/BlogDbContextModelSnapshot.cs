// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    partial class BlogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Baneos.Baneo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Concluye")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("concluye");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mensaje");

                    b.Property<Guid>("ModeradorId")
                        .HasColumnType("uuid")
                        .HasColumnName("moderador_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UsuarioBaneadoId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_baneado_id");

                    b.HasKey("Id");

                    b.HasIndex("ModeradorId");

                    b.HasIndex("UsuarioBaneadoId");

                    b.ToTable("baneos", (string)null);
                });

            modelBuilder.Entity("Domain.Categorias.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<bool>("OcultoPorDefecto")
                        .HasColumnType("boolean")
                        .HasColumnName("oculto_por_defecto");

                    b.HasKey("Id");

                    b.ToTable("categorias", (string)null);
                });

            modelBuilder.Entity("Domain.Categorias.Subcategoria", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("Categoria")
                        .HasColumnType("uuid")
                        .HasColumnName("categoria_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("NombreCorto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_corto");

                    b.HasKey("Id");

                    b.HasIndex("Categoria");

                    b.ToTable("subcategorias", (string)null);
                });

            modelBuilder.Entity("Domain.Comentarios.Comentario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AutorId")
                        .HasColumnType("uuid")
                        .HasColumnName("autor_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Hilo")
                        .HasColumnType("uuid")
                        .HasColumnName("hilo_id");

                    b.Property<bool>("RecibirNotificaciones")
                        .HasColumnType("boolean")
                        .HasColumnName("recibir_notificaciones");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.ComplexProperty<Dictionary<string, object>>("Informacion", "Domain.Comentarios.Comentario.Informacion#InformacionDeComentario", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int?>("Dados")
                                .HasColumnType("integer")
                                .HasColumnName("dados");

                            b1.Property<string>("TagUnico")
                                .HasColumnType("text")
                                .HasColumnName("tag_unico");

                            b1.ComplexProperty<Dictionary<string, object>>("Tag", "Domain.Comentarios.Comentario.Informacion#InformacionDeComentario.Tag#Tag", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("tag");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Texto", "Domain.Comentarios.Comentario.Texto#Texto", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("encuesta_id");
                        });

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("Hilo");

                    b.ToTable("comentarios", (string)null);
                });

            modelBuilder.Entity("Domain.Encuestas.Encuesta", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("encuestas", (string)null);
                });

            modelBuilder.Entity("Domain.Hilos.Hilo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AutorId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_id");

                    b.Property<Guid>("Categoria")
                        .HasColumnType("uuid")
                        .HasColumnName("subcategoria_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Encuesta")
                        .HasColumnType("uuid")
                        .HasColumnName("encuesta_id");

                    b.Property<bool>("RecibirNotificaciones")
                        .HasColumnType("boolean")
                        .HasColumnName("recibir_notificaciones");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UltimoBump")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ultimo_bump");

                    b.ComplexProperty<Dictionary<string, object>>("Descripcion", "Domain.Hilos.Hilo.Descripcion#Descripcion", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("descripcion");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Titulo", "Domain.Hilos.Hilo.Titulo#Titulo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("titulo");
                        });

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("Categoria");

                    b.HasIndex("Encuesta")
                        .IsUnique();

                    b.ToTable("hilos", (string)null);
                });

            modelBuilder.Entity("Domain.Hilos.RelacionDeHilo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Favorito")
                        .HasColumnType("boolean")
                        .HasColumnName("favorito");

                    b.Property<Guid>("HiloId")
                        .HasColumnType("uuid")
                        .HasColumnName("hilo_id");

                    b.Property<bool>("Oculto")
                        .HasColumnType("boolean")
                        .HasColumnName("oculto");

                    b.Property<bool>("Seguido")
                        .HasColumnType("boolean")
                        .HasColumnName("seguido");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("HiloId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("relaciones_de_hilo", (string)null);
                });

            modelBuilder.Entity("Domain.Notificaciones.Notificacion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NotificadoId")
                        .HasColumnType("uuid")
                        .HasColumnName("notificado_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uuid");

                    b.Property<string>("tipo_de_notificacion")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.HasKey("Id");

                    b.HasIndex("NotificadoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("notificaciones", (string)null);

                    b.HasDiscriminator<string>("tipo_de_notificacion").HasValue("Notificacion");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Usuarios.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("Rango")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("usuarios", (string)null);

                    b.HasDiscriminator<int>("Rango");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Notificaciones.HiloComentadoNotificacion", b =>
                {
                    b.HasBaseType("Domain.Notificaciones.Notificacion");

                    b.Property<Guid>("ComentarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("comentario_id");

                    b.Property<Guid>("HiloId")
                        .HasColumnType("uuid")
                        .HasColumnName("hilo_id");

                    b.HasIndex("ComentarioId");

                    b.HasIndex("HiloId");

                    b.HasDiscriminator().HasValue("hilo_comentado");
                });

            modelBuilder.Entity("Domain.Usuarios.Anonimo", b =>
                {
                    b.HasBaseType("Domain.Usuarios.Usuario");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Domain.Usuarios.Moderador", b =>
                {
                    b.HasBaseType("Domain.Usuarios.Usuario");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Domain.Baneos.Baneo", b =>
                {
                    b.HasOne("Domain.Usuarios.Moderador", null)
                        .WithMany()
                        .HasForeignKey("ModeradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Usuarios.Anonimo", null)
                        .WithMany()
                        .HasForeignKey("UsuarioBaneadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Categorias.Subcategoria", b =>
                {
                    b.HasOne("Domain.Categorias.Categoria", null)
                        .WithMany()
                        .HasForeignKey("Categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Comentarios.Comentario", b =>
                {
                    b.HasOne("Domain.Usuarios.Usuario", null)
                        .WithMany()
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Hilos.Hilo", null)
                        .WithMany()
                        .HasForeignKey("Hilo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Domain.Comentarios.DenunciaDeComentario", "Denuncias", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("ComentarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("comentario_id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("DenuncianteId")
                                .HasColumnType("uuid")
                                .HasColumnName("denunciante_id");

                            b1.Property<int>("Razon")
                                .HasColumnType("integer");

                            b1.Property<int>("Status")
                                .HasColumnType("integer")
                                .HasColumnName("status");

                            b1.HasKey("Id");

                            b1.HasIndex("ComentarioId");

                            b1.HasIndex("DenuncianteId");

                            b1.ToTable("denuncias_de_comentario", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ComentarioId");

                            b1.HasOne("Domain.Usuarios.Usuario", null)
                                .WithMany()
                                .HasForeignKey("DenuncianteId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.OwnsMany("Domain.Comentarios.RelacionDeComentario", "Relaciones", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("ComentarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("comentario_id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<bool>("Oculto")
                                .HasColumnType("boolean")
                                .HasColumnName("oculto");

                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("usuario_id");

                            b1.HasKey("Id");

                            b1.HasIndex("ComentarioId");

                            b1.HasIndex("UsuarioId");

                            b1.ToTable("relaciones_de_comentario", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ComentarioId");

                            b1.HasOne("Domain.Usuarios.Usuario", null)
                                .WithMany()
                                .HasForeignKey("UsuarioId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("Denuncias");

                    b.Navigation("Relaciones");
                });

            modelBuilder.Entity("Domain.Encuestas.Encuesta", b =>
                {
                    b.OwnsMany("Domain.Encuestas.Respuesta", "Respuestas", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Contenido")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("contenido");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("EncuestaId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("EncuestaId");

                            b1.ToTable("respuestas", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("EncuestaId");
                        });

                    b.OwnsMany("Domain.Encuestas.Voto", "Votos", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("EncuestaId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("RespuestaId")
                                .HasColumnType("uuid")
                                .HasColumnName("respuesta_id");

                            b1.Property<Guid>("VotanteId")
                                .HasColumnType("uuid")
                                .HasColumnName("votante_id");

                            b1.HasKey("Id");

                            b1.HasIndex("EncuestaId");

                            b1.HasIndex("VotanteId");

                            b1.ToTable("votos", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("EncuestaId");

                            b1.HasOne("Domain.Usuarios.Usuario", null)
                                .WithMany()
                                .HasForeignKey("VotanteId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("Respuestas");

                    b.Navigation("Votos");
                });

            modelBuilder.Entity("Domain.Hilos.Hilo", b =>
                {
                    b.HasOne("Domain.Usuarios.Usuario", null)
                        .WithMany()
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Categorias.Subcategoria", null)
                        .WithMany()
                        .HasForeignKey("Categoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Encuestas.Encuesta", null)
                        .WithOne()
                        .HasForeignKey("Domain.Hilos.Hilo", "Encuesta");

                    b.OwnsOne("Domain.Stickies.Sticky", "Sticky", b1 =>
                        {
                            b1.Property<Guid>("Hilo")
                                .HasColumnType("uuid")
                                .HasColumnName("hilo_id");

                            b1.Property<DateTime?>("Conluye")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("concluye");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid?>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.HasKey("Hilo");

                            b1.ToTable("stickies", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("Hilo");
                        });

                    b.OwnsMany("Domain.Hilos.ComentarioDestacado", "ComentarioDestacados", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("ComentarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("comentario_id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("HiloId")
                                .HasColumnType("uuid")
                                .HasColumnName("hilo_id");

                            b1.HasKey("Id");

                            b1.HasIndex("ComentarioId");

                            b1.HasIndex("HiloId");

                            b1.ToTable("comentarios_destacados", (string)null);

                            b1.HasOne("Domain.Comentarios.Comentario", null)
                                .WithMany()
                                .HasForeignKey("ComentarioId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("HiloId");
                        });

                    b.OwnsMany("Domain.Hilos.DenunciaDeHilo", "Denuncias", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("DenuncianteId")
                                .HasColumnType("uuid")
                                .HasColumnName("denunciante_id");

                            b1.Property<Guid>("HiloId")
                                .HasColumnType("uuid")
                                .HasColumnName("hilo_id");

                            b1.Property<int>("Razon")
                                .HasColumnType("integer")
                                .HasColumnName("razon");

                            b1.Property<int>("Status")
                                .HasColumnType("integer")
                                .HasColumnName("status");

                            b1.HasKey("Id");

                            b1.HasIndex("DenuncianteId");

                            b1.HasIndex("HiloId");

                            b1.ToTable("denuncias_de_hilo", (string)null);

                            b1.HasOne("Domain.Usuarios.Usuario", null)
                                .WithMany()
                                .HasForeignKey("DenuncianteId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("HiloId");
                        });

                    b.OwnsOne("Domain.Hilos.ValueObjects.ConfiguracionDeComentarios", "Configuracion", b1 =>
                        {
                            b1.Property<Guid>("HiloId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("Dados")
                                .HasColumnType("boolean")
                                .HasColumnName("dados");

                            b1.Property<bool>("IdUnicoActivado")
                                .HasColumnType("boolean")
                                .HasColumnName("id_unico_activado");

                            b1.HasKey("HiloId");

                            b1.ToTable("hilos");

                            b1.WithOwner()
                                .HasForeignKey("HiloId");
                        });

                    b.Navigation("ComentarioDestacados");

                    b.Navigation("Configuracion")
                        .IsRequired();

                    b.Navigation("Denuncias");

                    b.Navigation("Sticky");
                });

            modelBuilder.Entity("Domain.Hilos.RelacionDeHilo", b =>
                {
                    b.HasOne("Domain.Hilos.Hilo", null)
                        .WithMany()
                        .HasForeignKey("HiloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Usuarios.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Notificaciones.Notificacion", b =>
                {
                    b.HasOne("Domain.Usuarios.Usuario", null)
                        .WithMany()
                        .HasForeignKey("NotificadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Usuarios.Usuario", null)
                        .WithMany("Notificaciones")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("Domain.Notificaciones.HiloComentadoNotificacion", b =>
                {
                    b.HasOne("Domain.Comentarios.Comentario", null)
                        .WithMany()
                        .HasForeignKey("ComentarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Hilos.Hilo", null)
                        .WithMany()
                        .HasForeignKey("HiloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Usuarios.Usuario", b =>
                {
                    b.Navigation("Notificaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
