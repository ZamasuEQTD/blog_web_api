// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    partial class BlogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Baneos.Baneo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Concluye")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("concluye");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Mensaje")
                        .HasColumnType("text")
                        .HasColumnName("mensaje");

                    b.Property<Guid>("ModeradorId")
                        .HasColumnType("uuid")
                        .HasColumnName("moderador_id");

                    b.Property<int>("Razon")
                        .HasColumnType("integer")
                        .HasColumnName("razon");

                    b.Property<Guid>("UsuarioBaneadoId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_baneado_id");

                    b.HasKey("Id");

                    b.HasIndex("ModeradorId");

                    b.HasIndex("UsuarioBaneadoId");

                    b.ToTable("baneos", (string)null);
                });

            modelBuilder.Entity("Domain.Categorias.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<bool>("OcultoPorDefecto")
                        .HasColumnType("boolean")
                        .HasColumnName("oculto_por_defecto");

                    b.HasKey("Id");

                    b.ToTable("categorias", (string)null);
                });

            modelBuilder.Entity("Domain.Categorias.Subcategoria", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("NombreCorto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_corto");

                    b.Property<Guid?>("categoria_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("categoria_id");

                    b.ToTable("subcategorias", (string)null);
                });

            modelBuilder.Entity("Domain.Comentarios.Comentario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AutorId")
                        .HasColumnType("uuid")
                        .HasColumnName("autor_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("Dados")
                        .HasColumnType("integer")
                        .HasColumnName("dados");

                    b.Property<Guid>("HiloId")
                        .HasColumnType("uuid")
                        .HasColumnName("hilo_id");

                    b.Property<Guid?>("HiloId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MediaSpoileableId")
                        .HasColumnType("uuid")
                        .HasColumnName("media_spoileable_id");

                    b.Property<bool>("RecibirNotificaciones")
                        .HasColumnType("boolean")
                        .HasColumnName("recibir_notificaciones");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<string>("TagUnico")
                        .HasColumnType("text")
                        .HasColumnName("tag_unico");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("texto");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("HiloId");

                    b.HasIndex("HiloId1");

                    b.HasIndex("MediaSpoileableId");

                    b.ToTable("comentarios", (string)null);
                });

            modelBuilder.Entity("Domain.Encuestas.Encuesta", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("encuestas", (string)null);
                });

            modelBuilder.Entity("Domain.Features.Medias.Models.HashedMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Filename")
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.ToTable("medias", (string)null);
                });

            modelBuilder.Entity("Domain.Features.Medias.Models.MediaSpoileable", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("HashedMediaId")
                        .HasColumnType("uuid")
                        .HasColumnName("hashed_media_id");

                    b.Property<bool>("Spoiler")
                        .HasColumnType("boolean")
                        .HasColumnName("spoiler");

                    b.HasKey("Id");

                    b.HasIndex("HashedMediaId");

                    b.ToTable("medias_spoileables", (string)null);
                });

            modelBuilder.Entity("Domain.Hilos.Hilo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AutorId")
                        .HasColumnType("uuid")
                        .HasColumnName("autor_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("EncuestaId")
                        .HasColumnType("uuid")
                        .HasColumnName("encuesta_id");

                    b.Property<Guid>("PortadaId")
                        .HasColumnType("uuid")
                        .HasColumnName("portada_id");

                    b.Property<bool>("RecibirNotificaciones")
                        .HasColumnType("boolean")
                        .HasColumnName("recibir_notificaciones");

                    b.Property<Guid>("SubcategoriaId")
                        .HasColumnType("uuid")
                        .HasColumnName("subcategoria_id");

                    b.Property<DateTime>("UltimoBump")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ultimo_bump");

                    b.ComplexProperty<Dictionary<string, object>>("Descripcion", "Domain.Hilos.Hilo.Descripcion#Descripcion", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("descripcion");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Titulo", "Domain.Hilos.Hilo.Titulo#Titulo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("titulo");
                        });

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("EncuestaId")
                        .IsUnique();

                    b.HasIndex("PortadaId");

                    b.HasIndex("SubcategoriaId");

                    b.ToTable("hilos", (string)null);
                });

            modelBuilder.Entity("Domain.Hilos.HiloInteraccion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Favorito")
                        .HasColumnType("boolean")
                        .HasColumnName("favorito");

                    b.Property<Guid>("HiloId")
                        .HasColumnType("uuid")
                        .HasColumnName("hilo_id");

                    b.Property<bool>("Oculto")
                        .HasColumnType("boolean")
                        .HasColumnName("oculto");

                    b.Property<bool>("Seguido")
                        .HasColumnType("boolean")
                        .HasColumnName("seguido");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("HiloId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("hilo_interacciones", (string)null);
                });

            modelBuilder.Entity("Domain.Notificaciones.Notificacion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("NotificadoId")
                        .HasColumnType("uuid")
                        .HasColumnName("notificado_id");

                    b.Property<string>("tipo_de_interaccion")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.HasKey("Id");

                    b.HasIndex("NotificadoId");

                    b.ToTable("notificaciones", (string)null);

                    b.HasDiscriminator<string>("tipo_de_interaccion").HasValue("Notificacion");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Usuarios.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c49b6cf-9f30-4517-813e-5e2e6aae15fa"),
                            Name = "Anonimo",
                            NormalizedName = "ANONIMO",
                            ShortName = "Anon"
                        },
                        new
                        {
                            Id = new Guid("a164b7bd-46c9-4f42-88e5-e37fda1b10ac"),
                            Name = "Moderador",
                            NormalizedName = "MODERADOR",
                            ShortName = "Mod"
                        },
                        new
                        {
                            Id = new Guid("242e0f20-2568-4b46-b90c-e26493be9bcd"),
                            Name = "Owner",
                            NormalizedName = "Owner",
                            ShortName = "Owner"
                        });
                });

            modelBuilder.Entity("Domain.Usuarios.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Moderador")
                        .HasColumnType("text")
                        .HasColumnName("Moderador");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("usuarios", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("84d55df5-946a-478b-a493-8799e002df7b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3733a5ac-1ff2-4d8d-b143-7514d121b89f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Moderador = "Zamasus",
                            PasswordHash = "$2a$13$yHIvZPXm6bg471cyIrgPWOQlHk3nFDh17ZJsnyDrP.RF2NmK.gpPO",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Moderador"
                        },
                        new
                        {
                            Id = new Guid("8266d993-8287-46c3-9779-4a100120e5b3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e1aefa7-b581-4e87-9ace-710ff3e37d1a",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Moderador = "Zamasu",
                            PasswordHash = "$2a$13$fN8SPSuCYlUy3uEBGf3tGOmhUU5A7RCNSagbwjYziM/zLVy4xdkJW",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Owner1223"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<Domain.Usuarios.UsuarioId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<Domain.Usuarios.UsuarioId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<Domain.Usuarios.UsuarioId>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<Domain.Usuarios.UsuarioId>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("usuario_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("usuario_roles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "84d55df5-946a-478b-a493-8799e002df7b",
                            RoleId = "a164b7bd-46c9-4f42-88e5-e37fda1b10ac"
                        },
                        new
                        {
                            UserId = "8266d993-8287-46c3-9779-4a100120e5b3",
                            RoleId = "242e0f20-2568-4b46-b90c-e26493be9bcd"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<Domain.Usuarios.UsuarioId>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Notificaciones.HiloInteraccionNotificacion", b =>
                {
                    b.HasBaseType("Domain.Notificaciones.Notificacion");

                    b.Property<Guid>("ComentarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("comentario_id");

                    b.Property<Guid>("HiloId")
                        .HasColumnType("uuid")
                        .HasColumnName("hilo_id");

                    b.HasIndex("ComentarioId");

                    b.HasIndex("HiloId");

                    b.HasDiscriminator().HasValue("HiloInteraccionNotificacion");
                });

            modelBuilder.Entity("Domain.Notificaciones.ComentarioRespondidoNotificacion", b =>
                {
                    b.HasBaseType("Domain.Notificaciones.HiloInteraccionNotificacion");

                    b.Property<Guid>("RespondidoId")
                        .HasColumnType("uuid")
                        .HasColumnName("respondido_id");

                    b.HasIndex("RespondidoId");

                    b.HasDiscriminator().HasValue("ComentarioRespondido");
                });

            modelBuilder.Entity("Domain.Notificaciones.HiloComentadoNotificacion", b =>
                {
                    b.HasBaseType("Domain.Notificaciones.HiloInteraccionNotificacion");

                    b.HasDiscriminator().HasValue("HiloComentado");
                });

            modelBuilder.Entity("Domain.Notificaciones.HiloSeguidoNotificacion", b =>
                {
                    b.HasBaseType("Domain.Notificaciones.HiloInteraccionNotificacion");

                    b.HasDiscriminator().HasValue("HiloSeguido");
                });

            modelBuilder.Entity("Domain.Baneos.Baneo", b =>
                {
                    b.HasOne("Domain.Usuarios.Usuario", null)
                        .WithMany()
                        .HasForeignKey("ModeradorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Usuarios.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioBaneadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Categorias.Subcategoria", b =>
                {
                    b.HasOne("Domain.Categorias.Categoria", null)
                        .WithMany("Subcategorias")
                        .HasForeignKey("categoria_id");
                });

            modelBuilder.Entity("Domain.Comentarios.Comentario", b =>
                {
                    b.HasOne("Domain.Usuarios.Usuario", null)
                        .WithMany()
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Hilos.Hilo", null)
                        .WithMany()
                        .HasForeignKey("HiloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Hilos.Hilo", null)
                        .WithMany("Comentarios")
                        .HasForeignKey("HiloId1");

                    b.HasOne("Domain.Features.Medias.Models.MediaSpoileable", null)
                        .WithMany()
                        .HasForeignKey("MediaSpoileableId");

                    b.OwnsOne("Domain.Usuarios.Autor", "Autor", b1 =>
                        {
                            b1.Property<Guid>("ComentarioId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("autor_nombre");

                            b1.Property<string>("Rango")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("autor_rango");

                            b1.HasKey("ComentarioId");

                            b1.ToTable("comentarios");

                            b1.WithOwner()
                                .HasForeignKey("ComentarioId");
                        });

                    b.OwnsMany("Domain.Comentarios.ComentarioInterracion", "Relaciones", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("ComentarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("comentario_id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<bool>("Oculto")
                                .HasColumnType("boolean")
                                .HasColumnName("oculto");

                            b1.Property<Guid>("UsuarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("usuario_id");

                            b1.HasKey("Id");

                            b1.HasIndex("ComentarioId");

                            b1.HasIndex("UsuarioId");

                            b1.ToTable("comentario_interacciones", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ComentarioId");

                            b1.HasOne("Domain.Usuarios.Usuario", null)
                                .WithMany()
                                .HasForeignKey("UsuarioId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.OwnsMany("Domain.Comentarios.DenunciaDeComentario", "Denuncias", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("ComentarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("comentario_id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("DenuncianteId")
                                .HasColumnType("uuid")
                                .HasColumnName("denunciante_id");

                            b1.Property<int>("Razon")
                                .HasColumnType("integer");

                            b1.Property<int>("Status")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("ComentarioId");

                            b1.HasIndex("DenuncianteId");

                            b1.ToTable("denuncias_de_comentario", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ComentarioId");

                            b1.HasOne("Domain.Usuarios.Usuario", null)
                                .WithMany()
                                .HasForeignKey("DenuncianteId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.OwnsOne("Domain.Comentarios.ValueObjects.Colores", "Color", b1 =>
                        {
                            b1.Property<Guid>("ComentarioId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("color");

                            b1.HasKey("ComentarioId");

                            b1.ToTable("comentarios");

                            b1.WithOwner()
                                .HasForeignKey("ComentarioId");
                        });

                    b.OwnsOne("Domain.Comentarios.ValueObjects.ComentarioStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("ComentarioId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("status");

                            b1.HasKey("ComentarioId");

                            b1.ToTable("comentarios");

                            b1.WithOwner()
                                .HasForeignKey("ComentarioId");
                        });

                    b.OwnsMany("Domain.Comentarios.Respuesta", "Respuestas", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("RespondidoId")
                                .HasColumnType("uuid")
                                .HasColumnName("respondido_id");

                            b1.Property<Guid>("RespuestaId")
                                .HasColumnType("uuid")
                                .HasColumnName("respuesta_id");

                            b1.HasKey("Id");

                            b1.HasIndex("RespondidoId");

                            b1.HasIndex("RespuestaId");

                            b1.ToTable("respuestas_comentarios", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("RespondidoId");

                            b1.HasOne("Domain.Comentarios.Comentario", null)
                                .WithMany()
                                .HasForeignKey("RespuestaId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("Autor")
                        .IsRequired();

                    b.Navigation("Color")
                        .IsRequired();

                    b.Navigation("Denuncias");

                    b.Navigation("Relaciones");

                    b.Navigation("Respuestas");

                    b.Navigation("Status")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Encuestas.Encuesta", b =>
                {
                    b.OwnsMany("Domain.Encuestas.Voto", "Votos", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("EncuestaId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("RespuestaId")
                                .HasColumnType("uuid")
                                .HasColumnName("respuesta_id");

                            b1.Property<Guid>("VotanteId")
                                .HasColumnType("uuid")
                                .HasColumnName("votante_id");

                            b1.HasKey("Id");

                            b1.HasIndex("EncuestaId");

                            b1.HasIndex("VotanteId");

                            b1.ToTable("votos", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("EncuestaId");

                            b1.HasOne("Domain.Usuarios.Usuario", null)
                                .WithMany()
                                .HasForeignKey("VotanteId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.OwnsMany("Domain.Encuestas.Respuesta", "Respuestas", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Contenido")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("contenido");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid?>("encuesta_id")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("encuesta_id");

                            b1.ToTable("respuestas", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("encuesta_id");
                        });

                    b.Navigation("Respuestas");

                    b.Navigation("Votos");
                });

            modelBuilder.Entity("Domain.Features.Medias.Models.HashedMedia", b =>
                {
                    b.OwnsOne("Domain.Features.Medias.Models.Media", "Media", b1 =>
                        {
                            b1.Property<Guid>("HashedMediaId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Miniatura")
                                .HasColumnType("text")
                                .HasColumnName("miniatura");

                            b1.Property<string>("Previsualizacion")
                                .HasColumnType("text")
                                .HasColumnName("previsualizacion");

                            b1.HasKey("HashedMediaId");

                            b1.ToTable("medias");

                            b1.WithOwner()
                                .HasForeignKey("HashedMediaId");

                            b1.OwnsOne("Domain.Features.Medias.Models.MediaProvider", "Provider", b2 =>
                                {
                                    b2.Property<Guid>("MediaHashedMediaId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("provider");

                                    b2.HasKey("MediaHashedMediaId");

                                    b2.ToTable("medias");

                                    b2.WithOwner()
                                        .HasForeignKey("MediaHashedMediaId");
                                });

                            b1.Navigation("Provider")
                                .IsRequired();
                        });

                    b.Navigation("Media")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Features.Medias.Models.MediaSpoileable", b =>
                {
                    b.HasOne("Domain.Features.Medias.Models.HashedMedia", "HashedMedia")
                        .WithMany()
                        .HasForeignKey("HashedMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HashedMedia");
                });

            modelBuilder.Entity("Domain.Hilos.Hilo", b =>
                {
                    b.HasOne("Domain.Usuarios.Usuario", null)
                        .WithMany()
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Encuestas.Encuesta", null)
                        .WithOne()
                        .HasForeignKey("Domain.Hilos.Hilo", "EncuestaId");

                    b.HasOne("Domain.Features.Medias.Models.MediaSpoileable", null)
                        .WithMany()
                        .HasForeignKey("PortadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Categorias.Subcategoria", null)
                        .WithMany()
                        .HasForeignKey("SubcategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Stickies.Sticky", "Sticky", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("Hilo")
                                .HasColumnType("uuid")
                                .HasColumnName("hilo_id");

                            b1.HasKey("Id");

                            b1.HasIndex("Hilo")
                                .IsUnique();

                            b1.ToTable("stickies", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("Hilo");
                        });

                    b.OwnsMany("Domain.Hilos.ComentarioDestacado", "ComentarioDestacados", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("ComentarioId")
                                .HasColumnType("uuid")
                                .HasColumnName("comentario_id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");

                            b1.Property<Guid>("HiloId")
                                .HasColumnType("uuid")
                                .HasColumnName("hilo_id");

                            b1.HasKey("Id");

                            b1.HasIndex("ComentarioId");

                            b1.HasIndex("HiloId");

                            b1.ToTable("comentarios_destacados", (string)null);

                            b1.HasOne("Domain.Comentarios.Comentario", null)
                                .WithMany()
                                .HasForeignKey("ComentarioId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("HiloId");
                        });

                    b.OwnsMany("Domain.Hilos.DenunciaDeHilo", "Denuncias", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("DenuncianteId")
                                .HasColumnType("uuid")
                                .HasColumnName("denunciante_id");

                            b1.Property<Guid>("HiloId")
                                .HasColumnType("uuid")
                                .HasColumnName("hilo_id");

                            b1.Property<int>("Razon")
                                .HasColumnType("integer")
                                .HasColumnName("razon");

                            b1.Property<int>("Status")
                                .HasColumnType("integer")
                                .HasColumnName("status");

                            b1.HasKey("Id");

                            b1.HasIndex("DenuncianteId");

                            b1.HasIndex("HiloId");

                            b1.ToTable("denuncias_de_hilo", (string)null);

                            b1.HasOne("Domain.Usuarios.Usuario", null)
                                .WithMany()
                                .HasForeignKey("DenuncianteId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("HiloId");
                        });

                    b.OwnsOne("Domain.Usuarios.Autor", "Autor", b1 =>
                        {
                            b1.Property<Guid>("HiloId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("autor_nombre");

                            b1.Property<string>("Rango")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("autor_rango");

                            b1.HasKey("HiloId");

                            b1.ToTable("hilos");

                            b1.WithOwner()
                                .HasForeignKey("HiloId");
                        });

                    b.OwnsOne("Domain.Hilos.ValueObjects.ConfiguracionDeComentarios", "Configuracion", b1 =>
                        {
                            b1.Property<Guid>("HiloId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("Dados")
                                .HasColumnType("boolean")
                                .HasColumnName("dados");

                            b1.Property<bool>("IdUnicoActivado")
                                .HasColumnType("boolean")
                                .HasColumnName("id_unico_activado");

                            b1.HasKey("HiloId");

                            b1.ToTable("hilos");

                            b1.WithOwner()
                                .HasForeignKey("HiloId");
                        });

                    b.OwnsOne("Domain.Hilos.ValueObjects.HiloStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("HiloId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("status");

                            b1.HasKey("HiloId");

                            b1.ToTable("hilos");

                            b1.WithOwner()
                                .HasForeignKey("HiloId");
                        });

                    b.Navigation("Autor")
                        .IsRequired();

                    b.Navigation("ComentarioDestacados");

                    b.Navigation("Configuracion")
                        .IsRequired();

                    b.Navigation("Denuncias");

                    b.Navigation("Status")
                        .IsRequired();

                    b.Navigation("Sticky");
                });

            modelBuilder.Entity("Domain.Hilos.HiloInteraccion", b =>
                {
                    b.HasOne("Domain.Hilos.Hilo", null)
                        .WithMany("Interacciones")
                        .HasForeignKey("HiloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Usuarios.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Notificaciones.Notificacion", b =>
                {
                    b.HasOne("Domain.Usuarios.Usuario", null)
                        .WithMany()
                        .HasForeignKey("NotificadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Notificaciones.NotificacionStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("NotificacionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("status");

                            b1.HasKey("NotificacionId");

                            b1.ToTable("notificaciones");

                            b1.WithOwner()
                                .HasForeignKey("NotificacionId");
                        });

                    b.Navigation("Status")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<Domain.Usuarios.UsuarioId>", b =>
                {
                    b.HasOne("Domain.Usuarios.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<Domain.Usuarios.UsuarioId>", b =>
                {
                    b.HasOne("Domain.Usuarios.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<Domain.Usuarios.UsuarioId>", b =>
                {
                    b.HasOne("Domain.Usuarios.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<Domain.Usuarios.UsuarioId>", b =>
                {
                    b.HasOne("Domain.Usuarios.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Usuarios.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<Domain.Usuarios.UsuarioId>", b =>
                {
                    b.HasOne("Domain.Usuarios.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Notificaciones.HiloInteraccionNotificacion", b =>
                {
                    b.HasOne("Domain.Comentarios.Comentario", null)
                        .WithMany()
                        .HasForeignKey("ComentarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Hilos.Hilo", null)
                        .WithMany("Notificaciones")
                        .HasForeignKey("HiloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Notificaciones.ComentarioRespondidoNotificacion", b =>
                {
                    b.HasOne("Domain.Comentarios.Comentario", null)
                        .WithMany()
                        .HasForeignKey("RespondidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Categorias.Categoria", b =>
                {
                    b.Navigation("Subcategorias");
                });

            modelBuilder.Entity("Domain.Hilos.Hilo", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Interacciones");

                    b.Navigation("Notificaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
